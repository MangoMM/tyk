// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway/analytics_pb/analytics.proto

package tyk_analytics_record

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnalyticsRecord_Latency struct {
	Total                int64    `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Upstream             int64    `protobuf:"varint,2,opt,name=Upstream,proto3" json:"Upstream,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyticsRecord_Latency) Reset()         { *m = AnalyticsRecord_Latency{} }
func (m *AnalyticsRecord_Latency) String() string { return proto.CompactTextString(m) }
func (*AnalyticsRecord_Latency) ProtoMessage()    {}
func (*AnalyticsRecord_Latency) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{0}
}
func (m *AnalyticsRecord_Latency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyticsRecord_Latency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyticsRecord_Latency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyticsRecord_Latency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsRecord_Latency.Merge(m, src)
}
func (m *AnalyticsRecord_Latency) XXX_Size() int {
	return m.Size()
}
func (m *AnalyticsRecord_Latency) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsRecord_Latency.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsRecord_Latency proto.InternalMessageInfo

func (m *AnalyticsRecord_Latency) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *AnalyticsRecord_Latency) GetUpstream() int64 {
	if m != nil {
		return m.Upstream
	}
	return 0
}

type GeoData_Country struct {
	ISOCode              string   `protobuf:"bytes,1,opt,name=ISOCode,proto3" json:"ISOCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoData_Country) Reset()         { *m = GeoData_Country{} }
func (m *GeoData_Country) String() string { return proto.CompactTextString(m) }
func (*GeoData_Country) ProtoMessage()    {}
func (*GeoData_Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{1}
}
func (m *GeoData_Country) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoData_Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoData_Country.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoData_Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoData_Country.Merge(m, src)
}
func (m *GeoData_Country) XXX_Size() int {
	return m.Size()
}
func (m *GeoData_Country) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoData_Country.DiscardUnknown(m)
}

var xxx_messageInfo_GeoData_Country proto.InternalMessageInfo

func (m *GeoData_Country) GetISOCode() string {
	if m != nil {
		return m.ISOCode
	}
	return ""
}

type GeoData_City struct {
	Names                map[string]string `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GeoData_City) Reset()         { *m = GeoData_City{} }
func (m *GeoData_City) String() string { return proto.CompactTextString(m) }
func (*GeoData_City) ProtoMessage()    {}
func (*GeoData_City) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{2}
}
func (m *GeoData_City) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoData_City) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoData_City.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoData_City) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoData_City.Merge(m, src)
}
func (m *GeoData_City) XXX_Size() int {
	return m.Size()
}
func (m *GeoData_City) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoData_City.DiscardUnknown(m)
}

var xxx_messageInfo_GeoData_City proto.InternalMessageInfo

func (m *GeoData_City) GetNames() map[string]string {
	if m != nil {
		return m.Names
	}
	return nil
}

type GeoData_Location struct {
	Latitude             float64  `protobuf:"fixed64,1,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,2,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	TimeZone             string   `protobuf:"bytes,3,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoData_Location) Reset()         { *m = GeoData_Location{} }
func (m *GeoData_Location) String() string { return proto.CompactTextString(m) }
func (*GeoData_Location) ProtoMessage()    {}
func (*GeoData_Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{3}
}
func (m *GeoData_Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoData_Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoData_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoData_Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoData_Location.Merge(m, src)
}
func (m *GeoData_Location) XXX_Size() int {
	return m.Size()
}
func (m *GeoData_Location) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoData_Location.DiscardUnknown(m)
}

var xxx_messageInfo_GeoData_Location proto.InternalMessageInfo

func (m *GeoData_Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoData_Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GeoData_Location) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

type AnalyticsRecord_GeoData struct {
	Country              *GeoData_Country  `protobuf:"bytes,1,opt,name=Country,proto3" json:"Country,omitempty"`
	City                 *GeoData_City     `protobuf:"bytes,2,opt,name=City,proto3" json:"City,omitempty"`
	Location             *GeoData_Location `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AnalyticsRecord_GeoData) Reset()         { *m = AnalyticsRecord_GeoData{} }
func (m *AnalyticsRecord_GeoData) String() string { return proto.CompactTextString(m) }
func (*AnalyticsRecord_GeoData) ProtoMessage()    {}
func (*AnalyticsRecord_GeoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{4}
}
func (m *AnalyticsRecord_GeoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyticsRecord_GeoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyticsRecord_GeoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyticsRecord_GeoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsRecord_GeoData.Merge(m, src)
}
func (m *AnalyticsRecord_GeoData) XXX_Size() int {
	return m.Size()
}
func (m *AnalyticsRecord_GeoData) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsRecord_GeoData.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsRecord_GeoData proto.InternalMessageInfo

func (m *AnalyticsRecord_GeoData) GetCountry() *GeoData_Country {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *AnalyticsRecord_GeoData) GetCity() *GeoData_City {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *AnalyticsRecord_GeoData) GetLocation() *GeoData_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type AnalyticsRecord_NetworkStats struct {
	OpenConnections      int64    `protobuf:"varint,1,opt,name=OpenConnections,proto3" json:"OpenConnections,omitempty"`
	ClosedConnections    int64    `protobuf:"varint,2,opt,name=ClosedConnections,proto3" json:"ClosedConnections,omitempty"`
	BytesIn              int64    `protobuf:"varint,3,opt,name=BytesIn,proto3" json:"BytesIn,omitempty"`
	BytesOut             int64    `protobuf:"varint,4,opt,name=BytesOut,proto3" json:"BytesOut,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyticsRecord_NetworkStats) Reset()         { *m = AnalyticsRecord_NetworkStats{} }
func (m *AnalyticsRecord_NetworkStats) String() string { return proto.CompactTextString(m) }
func (*AnalyticsRecord_NetworkStats) ProtoMessage()    {}
func (*AnalyticsRecord_NetworkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{5}
}
func (m *AnalyticsRecord_NetworkStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyticsRecord_NetworkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyticsRecord_NetworkStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyticsRecord_NetworkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsRecord_NetworkStats.Merge(m, src)
}
func (m *AnalyticsRecord_NetworkStats) XXX_Size() int {
	return m.Size()
}
func (m *AnalyticsRecord_NetworkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsRecord_NetworkStats.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsRecord_NetworkStats proto.InternalMessageInfo

func (m *AnalyticsRecord_NetworkStats) GetOpenConnections() int64 {
	if m != nil {
		return m.OpenConnections
	}
	return 0
}

func (m *AnalyticsRecord_NetworkStats) GetClosedConnections() int64 {
	if m != nil {
		return m.ClosedConnections
	}
	return 0
}

func (m *AnalyticsRecord_NetworkStats) GetBytesIn() int64 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *AnalyticsRecord_NetworkStats) GetBytesOut() int64 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

type AnalyticsRecord struct {
	Host                 string                        `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Method               string                        `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	Path                 string                        `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	RawPath              string                        `protobuf:"bytes,4,opt,name=RawPath,proto3" json:"RawPath,omitempty"`
	ContentLength        int64                         `protobuf:"varint,5,opt,name=ContentLength,proto3" json:"ContentLength,omitempty"`
	UserAgent            string                        `protobuf:"bytes,6,opt,name=UserAgent,proto3" json:"UserAgent,omitempty"`
	Day                  int32                         `protobuf:"varint,7,opt,name=Day,proto3" json:"Day,omitempty"`
	Month                int32                         `protobuf:"varint,8,opt,name=Month,proto3" json:"Month,omitempty"`
	Year                 int32                         `protobuf:"varint,9,opt,name=Year,proto3" json:"Year,omitempty"`
	Hour                 int32                         `protobuf:"varint,10,opt,name=Hour,proto3" json:"Hour,omitempty"`
	ResponseCode         int32                         `protobuf:"varint,11,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
	APIKey               string                        `protobuf:"bytes,12,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	TimeStamp            *timestamp.Timestamp          `protobuf:"bytes,13,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	APIVersion           string                        `protobuf:"bytes,14,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	APIName              string                        `protobuf:"bytes,15,opt,name=APIName,proto3" json:"APIName,omitempty"`
	APIID                string                        `protobuf:"bytes,16,opt,name=APIID,proto3" json:"APIID,omitempty"`
	OrgID                string                        `protobuf:"bytes,17,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	RequestTime          int64                         `protobuf:"varint,18,opt,name=RequestTime,proto3" json:"RequestTime,omitempty"`
	Latency              *AnalyticsRecord_Latency      `protobuf:"bytes,19,opt,name=Latency,proto3" json:"Latency,omitempty"`
	RawRequest           string                        `protobuf:"bytes,20,opt,name=RawRequest,proto3" json:"RawRequest,omitempty"`
	RawResponse          string                        `protobuf:"bytes,21,opt,name=RawResponse,proto3" json:"RawResponse,omitempty"`
	IPAddress            string                        `protobuf:"bytes,22,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	Geo                  *AnalyticsRecord_GeoData      `protobuf:"bytes,23,opt,name=Geo,proto3" json:"Geo,omitempty"`
	Network              *AnalyticsRecord_NetworkStats `protobuf:"bytes,24,opt,name=Network,proto3" json:"Network,omitempty"`
	Tags                 []string                      `protobuf:"bytes,25,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Alias                string                        `protobuf:"bytes,26,opt,name=Alias,proto3" json:"Alias,omitempty"`
	TrackPath            bool                          `protobuf:"varint,27,opt,name=TrackPath,proto3" json:"TrackPath,omitempty"`
	ExpireAt             *timestamp.Timestamp          `protobuf:"bytes,28,opt,name=ExpireAt,proto3" json:"ExpireAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AnalyticsRecord) Reset()         { *m = AnalyticsRecord{} }
func (m *AnalyticsRecord) String() string { return proto.CompactTextString(m) }
func (*AnalyticsRecord) ProtoMessage()    {}
func (*AnalyticsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a65f229ed0deff8, []int{6}
}
func (m *AnalyticsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyticsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyticsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnalyticsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsRecord.Merge(m, src)
}
func (m *AnalyticsRecord) XXX_Size() int {
	return m.Size()
}
func (m *AnalyticsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsRecord proto.InternalMessageInfo

func (m *AnalyticsRecord) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AnalyticsRecord) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AnalyticsRecord) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AnalyticsRecord) GetRawPath() string {
	if m != nil {
		return m.RawPath
	}
	return ""
}

func (m *AnalyticsRecord) GetContentLength() int64 {
	if m != nil {
		return m.ContentLength
	}
	return 0
}

func (m *AnalyticsRecord) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *AnalyticsRecord) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *AnalyticsRecord) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *AnalyticsRecord) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *AnalyticsRecord) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *AnalyticsRecord) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *AnalyticsRecord) GetAPIKey() string {
	if m != nil {
		return m.APIKey
	}
	return ""
}

func (m *AnalyticsRecord) GetTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *AnalyticsRecord) GetAPIVersion() string {
	if m != nil {
		return m.APIVersion
	}
	return ""
}

func (m *AnalyticsRecord) GetAPIName() string {
	if m != nil {
		return m.APIName
	}
	return ""
}

func (m *AnalyticsRecord) GetAPIID() string {
	if m != nil {
		return m.APIID
	}
	return ""
}

func (m *AnalyticsRecord) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *AnalyticsRecord) GetRequestTime() int64 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

func (m *AnalyticsRecord) GetLatency() *AnalyticsRecord_Latency {
	if m != nil {
		return m.Latency
	}
	return nil
}

func (m *AnalyticsRecord) GetRawRequest() string {
	if m != nil {
		return m.RawRequest
	}
	return ""
}

func (m *AnalyticsRecord) GetRawResponse() string {
	if m != nil {
		return m.RawResponse
	}
	return ""
}

func (m *AnalyticsRecord) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *AnalyticsRecord) GetGeo() *AnalyticsRecord_GeoData {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *AnalyticsRecord) GetNetwork() *AnalyticsRecord_NetworkStats {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *AnalyticsRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AnalyticsRecord) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *AnalyticsRecord) GetTrackPath() bool {
	if m != nil {
		return m.TrackPath
	}
	return false
}

func (m *AnalyticsRecord) GetExpireAt() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireAt
	}
	return nil
}

func init() {
	proto.RegisterType((*AnalyticsRecord_Latency)(nil), "tyk_analytics_record.AnalyticsRecord_Latency")
	proto.RegisterType((*GeoData_Country)(nil), "tyk_analytics_record.GeoData_Country")
	proto.RegisterType((*GeoData_City)(nil), "tyk_analytics_record.GeoData_City")
	proto.RegisterMapType((map[string]string)(nil), "tyk_analytics_record.GeoData_City.NamesEntry")
	proto.RegisterType((*GeoData_Location)(nil), "tyk_analytics_record.GeoData_Location")
	proto.RegisterType((*AnalyticsRecord_GeoData)(nil), "tyk_analytics_record.AnalyticsRecord_GeoData")
	proto.RegisterType((*AnalyticsRecord_NetworkStats)(nil), "tyk_analytics_record.AnalyticsRecord_NetworkStats")
	proto.RegisterType((*AnalyticsRecord)(nil), "tyk_analytics_record.AnalyticsRecord")
}

func init() {
	proto.RegisterFile("gateway/analytics_pb/analytics.proto", fileDescriptor_7a65f229ed0deff8)
}

var fileDescriptor_7a65f229ed0deff8 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0x23, 0x45,
	0x10, 0x65, 0xe2, 0x24, 0xb6, 0xcb, 0x59, 0x92, 0x6d, 0xc2, 0x6e, 0x63, 0x22, 0x63, 0x8d, 0x16,
	0x64, 0x09, 0x70, 0x24, 0x23, 0xad, 0x22, 0x2e, 0x2b, 0xc7, 0x59, 0x85, 0xd1, 0x7a, 0x37, 0x56,
	0xc7, 0x8b, 0x04, 0x97, 0xa8, 0x63, 0x17, 0xb6, 0x15, 0x7b, 0xda, 0x4c, 0xb7, 0x09, 0xf3, 0x11,
	0xdc, 0xf9, 0x08, 0xae, 0xfc, 0x03, 0x47, 0x4e, 0x9c, 0x51, 0xf8, 0x11, 0x54, 0xd5, 0x33, 0xb6,
	0x37, 0x4b, 0x08, 0xdc, 0xea, 0xbd, 0xae, 0xaa, 0xae, 0xaa, 0x7e, 0x5d, 0xf0, 0x64, 0xa4, 0x1d,
	0x5e, 0xeb, 0xf4, 0x50, 0xc7, 0x7a, 0x9a, 0xba, 0xc9, 0xc0, 0x5e, 0xcc, 0x2f, 0x57, 0xa0, 0x39,
	0x4f, 0x8c, 0x33, 0x62, 0xdf, 0xa5, 0x57, 0x17, 0x2b, 0x8f, 0x04, 0x07, 0x26, 0x19, 0x56, 0x3f,
	0x1a, 0x19, 0x33, 0x9a, 0xe2, 0x21, 0xfb, 0x5c, 0x2e, 0xbe, 0x3b, 0x74, 0x93, 0x19, 0x5a, 0xa7,
	0x67, 0x73, 0x1f, 0x16, 0xbe, 0x80, 0xc7, 0xed, 0x3c, 0x48, 0x71, 0xcc, 0x45, 0x57, 0x3b, 0x8c,
	0x07, 0xa9, 0xd8, 0x87, 0xad, 0xbe, 0x71, 0x7a, 0x2a, 0x83, 0x7a, 0xd0, 0x28, 0x28, 0x0f, 0x44,
	0x15, 0x4a, 0xaf, 0xe7, 0xd6, 0x25, 0xa8, 0x67, 0x72, 0x83, 0x0f, 0x96, 0x38, 0xfc, 0x14, 0x76,
	0x4f, 0xd1, 0x9c, 0x68, 0xa7, 0x2f, 0x3a, 0x66, 0x11, 0xbb, 0x24, 0x15, 0x12, 0x8a, 0xd1, 0xf9,
	0x59, 0xc7, 0x0c, 0x91, 0xd3, 0x94, 0x55, 0x0e, 0xc3, 0x9f, 0x02, 0xd8, 0x59, 0x7a, 0x4f, 0x5c,
	0x2a, 0x3a, 0xb0, 0xf5, 0x4a, 0xcf, 0xd0, 0xca, 0xa0, 0x5e, 0x68, 0x54, 0x5a, 0x9f, 0x37, 0xff,
	0xa9, 0xa3, 0xe6, 0x7a, 0x48, 0x93, 0xfd, 0x9f, 0xd3, 0x45, 0xca, 0xc7, 0x56, 0x8f, 0x00, 0x56,
	0xa4, 0xd8, 0x83, 0xc2, 0x15, 0xa6, 0xd9, 0xcd, 0x64, 0x52, 0x53, 0x3f, 0xe8, 0xe9, 0x02, 0xb9,
	0xf6, 0xb2, 0xf2, 0xe0, 0xcb, 0x8d, 0xa3, 0x20, 0x1c, 0xc3, 0x5e, 0x9e, 0xbb, 0x6b, 0x06, 0xda,
	0x4d, 0x4c, 0x4c, 0xcd, 0x76, 0xb5, 0x9b, 0xb8, 0x45, 0x56, 0x7e, 0xa0, 0x96, 0x58, 0x1c, 0x40,
	0xb9, 0x6b, 0xe2, 0x91, 0x3f, 0xdc, 0xe0, 0xc3, 0x15, 0x41, 0x91, 0xfd, 0xc9, 0x0c, 0xbf, 0x35,
	0x31, 0xca, 0x02, 0x5f, 0xb5, 0xc4, 0xe1, 0x1f, 0xc1, 0xdb, 0x43, 0xcf, 0xae, 0x16, 0xcf, 0xa0,
	0x98, 0x8d, 0x8e, 0x2f, 0xac, 0xb4, 0x3e, 0xbe, 0x67, 0x0c, 0xde, 0x59, 0xe5, 0x51, 0xe2, 0x29,
	0x6c, 0xd2, 0x68, 0xb8, 0xa2, 0x4a, 0x2b, 0xbc, 0x7f, 0x88, 0x8a, 0xfd, 0xc5, 0x31, 0x94, 0xf2,
	0xb6, 0xb9, 0xe0, 0x4a, 0xeb, 0x93, 0x7f, 0x8f, 0xcd, 0xbd, 0xd5, 0x32, 0x2e, 0xfc, 0x25, 0x80,
	0x83, 0xdb, 0x8d, 0xbd, 0x42, 0x77, 0x6d, 0x92, 0xab, 0x73, 0xa7, 0x9d, 0x15, 0x0d, 0xd8, 0x3d,
	0x9b, 0x63, 0xdc, 0x31, 0x71, 0x8c, 0x03, 0x0a, 0xb1, 0x99, 0xb8, 0x6e, 0xd3, 0xe2, 0x33, 0x78,
	0xd8, 0x99, 0x1a, 0x8b, 0xc3, 0x75, 0x5f, 0xaf, 0xb7, 0xb7, 0x0f, 0x48, 0x65, 0xc7, 0xa9, 0x43,
	0x1b, 0xf9, 0xda, 0x0b, 0x2a, 0x87, 0xf4, 0x0e, 0x6c, 0x9e, 0x2d, 0x9c, 0xdc, 0xf4, 0x72, 0xcd,
	0x71, 0xf8, 0x6b, 0x11, 0x76, 0x6f, 0x95, 0x2b, 0x04, 0x6c, 0x7e, 0x65, 0xac, 0xcb, 0x24, 0xc3,
	0xb6, 0x78, 0x04, 0xdb, 0x2f, 0xd1, 0x8d, 0xcd, 0x30, 0x13, 0x4d, 0x86, 0xc8, 0xb7, 0xa7, 0xdd,
	0x38, 0x7b, 0x5f, 0xb6, 0xa9, 0x12, 0xa5, 0xaf, 0x99, 0xde, 0xf4, 0x7a, 0xcf, 0xa0, 0x78, 0x02,
	0x0f, 0x3a, 0x26, 0x76, 0x18, 0xbb, 0x2e, 0xc6, 0x23, 0x37, 0x96, 0x5b, 0x5c, 0xce, 0x9b, 0x24,
	0xa9, 0xea, 0xb5, 0xc5, 0xa4, 0x3d, 0xc2, 0xd8, 0xc9, 0x6d, 0xce, 0xb0, 0x22, 0x48, 0xcf, 0x27,
	0x3a, 0x95, 0xc5, 0x7a, 0xd0, 0xd8, 0x52, 0x64, 0x92, 0x9e, 0x5f, 0x9a, 0xd8, 0x8d, 0x65, 0x89,
	0x39, 0x0f, 0xa8, 0xb2, 0x6f, 0x50, 0x27, 0xb2, 0xcc, 0x24, 0xdb, 0xbe, 0xb3, 0x45, 0x22, 0xc1,
	0x73, 0x64, 0x8b, 0x10, 0x76, 0x14, 0xda, 0xb9, 0x89, 0x2d, 0xf2, 0x17, 0xad, 0xf0, 0xd9, 0x1b,
	0x1c, 0x75, 0xdf, 0xee, 0x45, 0x2f, 0x30, 0x95, 0x3b, 0xbe, 0x7b, 0x8f, 0xc4, 0x11, 0x94, 0x49,
	0xd1, 0xe7, 0xb4, 0x4c, 0xe4, 0x03, 0x56, 0x4c, 0xb5, 0xe9, 0xd7, 0x4d, 0x33, 0x5f, 0x37, 0xcd,
	0x7e, 0xbe, 0x6e, 0xd4, 0xca, 0x59, 0xd4, 0x00, 0xda, 0xbd, 0xe8, 0x6b, 0x4c, 0x2c, 0x89, 0xed,
	0x5d, 0xce, 0xba, 0xc6, 0xd0, 0x0c, 0xdb, 0xbd, 0x88, 0xbe, 0xb1, 0xdc, 0xf5, 0x33, 0xcc, 0x20,
	0x75, 0xdb, 0xee, 0x45, 0xd1, 0x89, 0xdc, 0xf3, 0xbf, 0x97, 0x01, 0xb1, 0x67, 0xc9, 0x28, 0x3a,
	0x91, 0x0f, 0x3d, 0xcb, 0x40, 0xd4, 0xa1, 0xa2, 0xf0, 0xfb, 0x05, 0x5a, 0x47, 0x37, 0x4b, 0xc1,
	0xd3, 0x5e, 0xa7, 0xc4, 0x29, 0x14, 0xb3, 0x5d, 0x27, 0xdf, 0xe3, 0xfa, 0xef, 0x58, 0x39, 0x77,
	0x2c, 0x48, 0x95, 0x47, 0x53, 0x43, 0x4a, 0x5f, 0x67, 0xa9, 0xe5, 0xbe, 0x6f, 0x68, 0xc5, 0x70,
	0x29, 0x84, 0xfc, 0x54, 0xe5, 0xfb, 0xec, 0xb0, 0x4e, 0xd1, 0xb3, 0x47, 0xbd, 0xf6, 0x70, 0x98,
	0xa0, 0xb5, 0xf2, 0x91, 0x7f, 0xf6, 0x25, 0x21, 0x9e, 0x41, 0xe1, 0x14, 0x8d, 0x7c, 0xfc, 0x7f,
	0x8a, 0xcc, 0xbe, 0xa9, 0xa2, 0x48, 0xd1, 0x85, 0x62, 0xf6, 0x0f, 0xa5, 0xe4, 0x24, 0xad, 0xff,
	0x96, 0x64, 0xfd, 0xf3, 0xaa, 0x3c, 0x05, 0x29, 0xa9, 0xaf, 0x47, 0x56, 0x7e, 0x50, 0x2f, 0x90,
	0xee, 0xc9, 0xe6, 0x97, 0x99, 0x4e, 0xb4, 0x95, 0xd5, 0xec, 0x65, 0x08, 0x50, 0x5b, 0xfd, 0x44,
	0x0f, 0xae, 0xf8, 0x3f, 0x7c, 0x58, 0x0f, 0x1a, 0x25, 0xb5, 0x22, 0xc4, 0x53, 0x28, 0x3d, 0xff,
	0x71, 0x3e, 0x49, 0xb0, 0xed, 0xe4, 0xc1, 0xbd, 0x02, 0x5a, 0xfa, 0x1e, 0xef, 0xfd, 0x76, 0x53,
	0x0b, 0x7e, 0xbf, 0xa9, 0x05, 0x7f, 0xde, 0xd4, 0x82, 0x9f, 0xff, 0xaa, 0xbd, 0x73, 0xb9, 0xcd,
	0xfe, 0x5f, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x5f, 0xe6, 0x97, 0x2b, 0x07, 0x00, 0x00,
}

func (m *AnalyticsRecord_Latency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyticsRecord_Latency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyticsRecord_Latency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Upstream != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.Upstream))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GeoData_Country) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoData_Country) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoData_Country) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ISOCode) > 0 {
		i -= len(m.ISOCode)
		copy(dAtA[i:], m.ISOCode)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.ISOCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeoData_City) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoData_City) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoData_City) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Names) > 0 {
		for k := range m.Names {
			v := m.Names[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAnalytics(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAnalytics(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAnalytics(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GeoData_Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoData_Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoData_Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TimeZone) > 0 {
		i -= len(m.TimeZone)
		copy(dAtA[i:], m.TimeZone)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.TimeZone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Longitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i--
		dAtA[i] = 0x11
	}
	if m.Latitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *AnalyticsRecord_GeoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyticsRecord_GeoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyticsRecord_GeoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.City != nil {
		{
			size, err := m.City.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Country != nil {
		{
			size, err := m.Country.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnalyticsRecord_NetworkStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyticsRecord_NetworkStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyticsRecord_NetworkStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BytesOut != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.BytesOut))
		i--
		dAtA[i] = 0x20
	}
	if m.BytesIn != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.BytesIn))
		i--
		dAtA[i] = 0x18
	}
	if m.ClosedConnections != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.ClosedConnections))
		i--
		dAtA[i] = 0x10
	}
	if m.OpenConnections != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.OpenConnections))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnalyticsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyticsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnalyticsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpireAt != nil {
		{
			size, err := m.ExpireAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.TrackPath {
		i--
		if m.TrackPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAnalytics(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Geo != nil {
		{
			size, err := m.Geo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.RawResponse) > 0 {
		i -= len(m.RawResponse)
		copy(dAtA[i:], m.RawResponse)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.RawResponse)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.RawRequest) > 0 {
		i -= len(m.RawRequest)
		copy(dAtA[i:], m.RawRequest)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.RawRequest)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Latency != nil {
		{
			size, err := m.Latency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.RequestTime != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.RequestTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.OrgID) > 0 {
		i -= len(m.OrgID)
		copy(dAtA[i:], m.OrgID)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.OrgID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.APIID) > 0 {
		i -= len(m.APIID)
		copy(dAtA[i:], m.APIID)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.APIID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.APIName) > 0 {
		i -= len(m.APIName)
		copy(dAtA[i:], m.APIName)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.APIName)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.APIVersion) > 0 {
		i -= len(m.APIVersion)
		copy(dAtA[i:], m.APIVersion)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.APIVersion)))
		i--
		dAtA[i] = 0x72
	}
	if m.TimeStamp != nil {
		{
			size, err := m.TimeStamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnalytics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.APIKey) > 0 {
		i -= len(m.APIKey)
		copy(dAtA[i:], m.APIKey)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.APIKey)))
		i--
		dAtA[i] = 0x62
	}
	if m.ResponseCode != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.ResponseCode))
		i--
		dAtA[i] = 0x58
	}
	if m.Hour != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.Hour))
		i--
		dAtA[i] = 0x50
	}
	if m.Year != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x48
	}
	if m.Month != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.Month))
		i--
		dAtA[i] = 0x40
	}
	if m.Day != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x38
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x32
	}
	if m.ContentLength != 0 {
		i = encodeVarintAnalytics(dAtA, i, uint64(m.ContentLength))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RawPath) > 0 {
		i -= len(m.RawPath)
		copy(dAtA[i:], m.RawPath)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.RawPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintAnalytics(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnalytics(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnalytics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnalyticsRecord_Latency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovAnalytics(uint64(m.Total))
	}
	if m.Upstream != 0 {
		n += 1 + sovAnalytics(uint64(m.Upstream))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoData_Country) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ISOCode)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoData_City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for k, v := range m.Names {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAnalytics(uint64(len(k))) + 1 + len(v) + sovAnalytics(uint64(len(v)))
			n += mapEntrySize + 1 + sovAnalytics(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoData_Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	l = len(m.TimeZone)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyticsRecord_GeoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Country != nil {
		l = m.Country.Size()
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.City != nil {
		l = m.City.Size()
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyticsRecord_NetworkStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenConnections != 0 {
		n += 1 + sovAnalytics(uint64(m.OpenConnections))
	}
	if m.ClosedConnections != 0 {
		n += 1 + sovAnalytics(uint64(m.ClosedConnections))
	}
	if m.BytesIn != 0 {
		n += 1 + sovAnalytics(uint64(m.BytesIn))
	}
	if m.BytesOut != 0 {
		n += 1 + sovAnalytics(uint64(m.BytesOut))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyticsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	l = len(m.RawPath)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.ContentLength != 0 {
		n += 1 + sovAnalytics(uint64(m.ContentLength))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.Day != 0 {
		n += 1 + sovAnalytics(uint64(m.Day))
	}
	if m.Month != 0 {
		n += 1 + sovAnalytics(uint64(m.Month))
	}
	if m.Year != 0 {
		n += 1 + sovAnalytics(uint64(m.Year))
	}
	if m.Hour != 0 {
		n += 1 + sovAnalytics(uint64(m.Hour))
	}
	if m.ResponseCode != 0 {
		n += 1 + sovAnalytics(uint64(m.ResponseCode))
	}
	l = len(m.APIKey)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	if m.TimeStamp != nil {
		l = m.TimeStamp.Size()
		n += 1 + l + sovAnalytics(uint64(l))
	}
	l = len(m.APIVersion)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	l = len(m.APIName)
	if l > 0 {
		n += 1 + l + sovAnalytics(uint64(l))
	}
	l = len(m.APIID)
	if l > 0 {
		n += 2 + l + sovAnalytics(uint64(l))
	}
	l = len(m.OrgID)
	if l > 0 {
		n += 2 + l + sovAnalytics(uint64(l))
	}
	if m.RequestTime != 0 {
		n += 2 + sovAnalytics(uint64(m.RequestTime))
	}
	if m.Latency != nil {
		l = m.Latency.Size()
		n += 2 + l + sovAnalytics(uint64(l))
	}
	l = len(m.RawRequest)
	if l > 0 {
		n += 2 + l + sovAnalytics(uint64(l))
	}
	l = len(m.RawResponse)
	if l > 0 {
		n += 2 + l + sovAnalytics(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 2 + l + sovAnalytics(uint64(l))
	}
	if m.Geo != nil {
		l = m.Geo.Size()
		n += 2 + l + sovAnalytics(uint64(l))
	}
	if m.Network != nil {
		l = m.Network.Size()
		n += 2 + l + sovAnalytics(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAnalytics(uint64(l))
		}
	}
	l = len(m.Alias)
	if l > 0 {
		n += 2 + l + sovAnalytics(uint64(l))
	}
	if m.TrackPath {
		n += 3
	}
	if m.ExpireAt != nil {
		l = m.ExpireAt.Size()
		n += 2 + l + sovAnalytics(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAnalytics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnalytics(x uint64) (n int) {
	return sovAnalytics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnalyticsRecord_Latency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyticsRecord_Latency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyticsRecord_Latency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upstream", wireType)
			}
			m.Upstream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upstream |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoData_Country) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoData_Country: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoData_Country: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISOCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISOCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoData_City) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoData_City: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoData_City: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Names == nil {
				m.Names = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalytics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalytics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAnalytics
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAnalytics
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalytics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAnalytics
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAnalytics
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAnalytics(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAnalytics
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Names[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoData_Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoData_Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoData_Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyticsRecord_GeoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyticsRecord_GeoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyticsRecord_GeoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Country == nil {
				m.Country = &GeoData_Country{}
			}
			if err := m.Country.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.City == nil {
				m.City = &GeoData_City{}
			}
			if err := m.City.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &GeoData_Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyticsRecord_NetworkStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyticsRecord_NetworkStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyticsRecord_NetworkStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenConnections", wireType)
			}
			m.OpenConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedConnections", wireType)
			}
			m.ClosedConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesIn", wireType)
			}
			m.BytesIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesIn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOut", wireType)
			}
			m.BytesOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyticsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyticsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyticsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentLength", wireType)
			}
			m.ContentLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			m.Hour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			m.ResponseCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = &timestamp.Timestamp{}
			}
			if err := m.TimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Latency == nil {
				m.Latency = &AnalyticsRecord_Latency{}
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawRequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Geo == nil {
				m.Geo = &AnalyticsRecord_GeoData{}
			}
			if err := m.Geo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &AnalyticsRecord_NetworkStats{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TrackPath = bool(v != 0)
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalytics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnalytics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpireAt == nil {
				m.ExpireAt = &timestamp.Timestamp{}
			}
			if err := m.ExpireAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalytics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnalytics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnalytics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnalytics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalytics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnalytics
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnalytics
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnalytics
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnalytics        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnalytics          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnalytics = fmt.Errorf("proto: unexpected end of group")
)
